//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.6.6324.28497 (NJsonSchema v8.33.6323.36213) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Nexosis.Api.Client.Model;

namespace Nexosis.Api.Client
{
    public partial class ApiClient 
    {
        private string _baseUrl = "https://api.dev.nexosisdev.com/api";
        
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="dataSetName">Limits sessions to those for a particular dataset</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). Limits sessions to those created on or after the specified date</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Limits sessions to those created on or before the specified date</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<Sessions> SessionsListAllAsync(string dataSetName, string startDate, string endDate)
        {
            return SessionsListAllAsync(dataSetName, startDate, endDate, System.Threading.CancellationToken.None);
        }
    
        /// <param name="dataSetName">Limits sessions to those for a particular dataset</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). Limits sessions to those created on or after the specified date</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Limits sessions to those created on or before the specified date</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<Sessions> SessionsListAllAsync(string dataSetName, string startDate, string endDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/sessions?");
            if (dataSetName != null) urlBuilder_.Append("dataSetName=").Append(System.Uri.EscapeDataString(dataSetName.ToString())).Append("&");
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(startDate.ToString())).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(endDate.ToString())).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Sessions); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Sessions>(responseData_);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Sessions);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="sessionId">Format - uuid. Session identifier of the session to retrieve</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<SessionResult> SessionsRetrieveSessionAsync(string sessionId)
        {
            return SessionsRetrieveSessionAsync(sessionId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="sessionId">Format - uuid. Session identifier of the session to retrieve</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<SessionResult> SessionsRetrieveSessionAsync(string sessionId, System.Threading.CancellationToken cancellationToken)
        {
            if (sessionId == null)
                throw new System.ArgumentNullException("sessionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/sessions/{sessionId}");
            urlBuilder_.Replace("{sessionId}", System.Uri.EscapeDataString(sessionId.ToString()));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = new SessionResult(); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SessionResult>(responseData_);
                                result_.AssignCost(headers_); 
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Specified session was not found", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SessionResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="sessionId">Format - uuid. Session identifier of the session to retrieve</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task SessionsRetrieveSessionStatusAsync(string sessionId)
        {
            return SessionsRetrieveSessionStatusAsync(sessionId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="sessionId">Format - uuid. Session identifier of the session to retrieve</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task SessionsRetrieveSessionStatusAsync(string sessionId, System.Threading.CancellationToken cancellationToken)
        {
            if (sessionId == null)
                throw new System.ArgumentNullException("sessionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/sessions/{sessionId}");
            urlBuilder_.Replace("{sessionId}", System.Uri.EscapeDataString(sessionId.ToString()));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("HEAD");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Specified session was not found", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="dataSetName">Name of the dataset for which to determine impact</param>
        /// <param name="targetColumn">Column in the specified dataset for which to determine impact</param>
        /// <param name="eventName">Name of the event for which to determine impact</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). First date of the event</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Last date of the event</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<SessionResult> SessionsCreateImpactSessionAsync(string dataSetName, string targetColumn, string eventName, string startDate, string endDate, DataSetData dataSetData)
        {
            return SessionsCreateImpactSessionAsync(dataSetName, targetColumn, eventName, startDate, endDate, dataSetData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="dataSetName">Name of the dataset for which to determine impact</param>
        /// <param name="targetColumn">Column in the specified dataset for which to determine impact</param>
        /// <param name="eventName">Name of the event for which to determine impact</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). First date of the event</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Last date of the event</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<SessionResult> SessionsCreateImpactSessionAsync(string dataSetName, string targetColumn, string eventName, string startDate, string endDate, DataSetData dataSetData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/sessions/impact?");
            if (dataSetName != null) urlBuilder_.Append("dataSetName=").Append(System.Uri.EscapeDataString(dataSetName.ToString())).Append("&");
            if (targetColumn != null) urlBuilder_.Append("targetColumn=").Append(System.Uri.EscapeDataString(targetColumn.ToString())).Append("&");
            if (eventName != null) urlBuilder_.Append("eventName=").Append(System.Uri.EscapeDataString(eventName.ToString())).Append("&");
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(startDate.ToString())).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(endDate.ToString())).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(dataSetData));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = new SessionResult(); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SessionResult>(responseData_);
                                result_.AssignCost(headers_);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SessionResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="dataSetName">Name of the dataset to forecast</param>
        /// <param name="targetColumn">Column in the specified dataset to forecast</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). First date to forecast</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Last date to forecast</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<SessionResult> SessionsCreateForecastSessionAsync(string dataSetName, string targetColumn, string startDate, string endDate, DataSetData dataSetData)
        {
            return SessionsCreateForecastSessionAsync(dataSetName, targetColumn, startDate, endDate, dataSetData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="dataSetName">Name of the dataset to forecast</param>
        /// <param name="targetColumn">Column in the specified dataset to forecast</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). First date to forecast</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Last date to forecast</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<SessionResult> SessionsCreateForecastSessionAsync(string dataSetName, string targetColumn, string startDate, string endDate, DataSetData dataSetData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/sessions/forecast?");
            if (dataSetName != null) urlBuilder_.Append("dataSetName=").Append(System.Uri.EscapeDataString(dataSetName.ToString())).Append("&");
            if (targetColumn != null) urlBuilder_.Append("targetColumn=").Append(System.Uri.EscapeDataString(targetColumn.ToString())).Append("&");
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(startDate.ToString())).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(endDate.ToString())).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(dataSetData));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = new SessionResult(); 
                            try
                            {
                                result_.Session = Newtonsoft.Json.JsonConvert.DeserializeObject<SessionRequest>(responseData_);
                                result_.AssignCost(headers_);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SessionResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="sessionId">Format - uuid. Session identifier for which to retrieve results</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<SessionResult> SessionsRetrieveResultsAsync(string sessionId)
        {
            return SessionsRetrieveResultsAsync(sessionId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="sessionId">Format - uuid. Session identifier for which to retrieve results</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<SessionResult> SessionsRetrieveResultsAsync(string sessionId, System.Threading.CancellationToken cancellationToken)
        {
            if (sessionId == null)
                throw new System.ArgumentNullException("sessionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/sessions/{sessionId}/results");
            urlBuilder_.Replace("{sessionId}", System.Uri.EscapeDataString(sessionId.ToString()));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = new SessionResult(); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SessionResult>(responseData_);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Specified session was not found", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SessionResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="partialName">Limits results to only those datasets with names containing the specified value</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<ListDataSetsResponse> DatasetsListAllAsync(string partialName)
        {
            return DatasetsListAllAsync(partialName, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partialName">Limits results to only those datasets with names containing the specified value</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<ListDataSetsResponse> DatasetsListAllAsync(string partialName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/data?");
            if (partialName != null) urlBuilder_.Append("partialName=").Append(System.Uri.EscapeDataString(partialName.ToString())).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ListDataSetsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ListDataSetsResponse>(responseData_);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ListDataSetsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="dataSetName">Name of the dataset for which to retrieve data</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). Limits results to those on or after the specified date</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Limits results to those on or before the specified date</param>
        /// <param name="page">Format - int32. Zero-based page number of results to retrieve</param>
        /// <param name="pageSize">Format - int32. Count of results to retrieve in each page (max 100)</param>
        /// <param name="include">Limits results to the specified columns</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<DataSetData> DatasetsRetrieveDataAsync(string dataSetName, string startDate, string endDate, int? page, int? pageSize, string include)
        {
            return DatasetsRetrieveDataAsync(dataSetName, startDate, endDate, page, pageSize, include, System.Threading.CancellationToken.None);
        }
    
        /// <param name="dataSetName">Name of the dataset for which to retrieve data</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). Limits results to those on or after the specified date</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Limits results to those on or before the specified date</param>
        /// <param name="page">Format - int32. Zero-based page number of results to retrieve</param>
        /// <param name="pageSize">Format - int32. Count of results to retrieve in each page (max 100)</param>
        /// <param name="include">Limits results to the specified columns</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<DataSetData> DatasetsRetrieveDataAsync(string dataSetName, string startDate, string endDate, int? page, int? pageSize, string include, System.Threading.CancellationToken cancellationToken)
        {
            if (dataSetName == null)
                throw new System.ArgumentNullException("dataSetName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/data/{dataSetName}?");
            urlBuilder_.Replace("{dataSetName}", System.Uri.EscapeDataString(dataSetName.ToString()));
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(startDate.ToString())).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(endDate.ToString())).Append("&");
            if (page != null) urlBuilder_.Append("page=").Append(System.Uri.EscapeDataString(page.Value.ToString())).Append("&");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(pageSize.Value.ToString())).Append("&");
            if (include != null) urlBuilder_.Append("include=").Append(System.Uri.EscapeDataString(include.ToString())).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DataSetData); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DataSetData>(responseData_);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("One or more query parameters are invalid", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Specified dataset was not found", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DataSetData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="dataSetName">Name of the dataset to which to add data</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<DataSetSummary> DatasetsAddDataAsync(string dataSetName, DataSetData dataSetData)
        {
            return DatasetsAddDataAsync(dataSetName, dataSetData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="dataSetName">Name of the dataset to which to add data</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<DataSetSummary> DatasetsAddDataAsync(string dataSetName, DataSetData dataSetData, System.Threading.CancellationToken cancellationToken)
        {
            if (dataSetName == null)
                throw new System.ArgumentNullException("dataSetName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/data/{dataSetName}");
            urlBuilder_.Replace("{dataSetName}", System.Uri.EscapeDataString(dataSetName.ToString()));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(dataSetData));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DataSetSummary); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DataSetSummary>(responseData_);
                                result_.AssignCost(headers_);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DataSetSummary);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="dataSetName">Name of the dataset from which to remove data</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). Limits data removed to those on or after the specified date</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Limits data removed to those on or before the specified date</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task DatasetsDeleteDataAsync(string dataSetName, string startDate, string endDate)
        {
            return DatasetsDeleteDataAsync(dataSetName, startDate, endDate, System.Threading.CancellationToken.None);
        }
    
        /// <param name="dataSetName">Name of the dataset from which to remove data</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). Limits data removed to those on or after the specified date</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Limits data removed to those on or before the specified date</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task DatasetsDeleteDataAsync(string dataSetName, string startDate, string endDate, System.Threading.CancellationToken cancellationToken)
        {
            if (dataSetName == null)
                throw new System.ArgumentNullException("dataSetName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/data/{dataSetName}?");
            urlBuilder_.Replace("{dataSetName}", System.Uri.EscapeDataString(dataSetName.ToString()));
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(startDate.ToString())).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(endDate.ToString())).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("One or more parameters are invalid", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Specified dataset was not found", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="dataSetName">Name of the dataset for which to retrieve results</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). Limits results to those on or after the specified date</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Limits results to those on or before the specified date</param>
        /// <param name="page">Format - int32. Zero-based page number of results to retrieve</param>
        /// <param name="pageSize">Format - int32. Count of results to retrieve in each page (max 100)</param>
        /// <param name="include">Limits results to the specified columns</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal System.Threading.Tasks.Task<ForecastResults> DatasetsRetrieveForecastsAsync(string dataSetName, string startDate, string endDate, int? page, int? pageSize, string include)
        {
            return DatasetsRetrieveForecastsAsync(dataSetName, startDate, endDate, page, pageSize, include, System.Threading.CancellationToken.None);
        }
    
        /// <param name="dataSetName">Name of the dataset for which to retrieve results</param>
        /// <param name="startDate">Format - date-time (as date-time in RFC3339). Limits results to those on or after the specified date</param>
        /// <param name="endDate">Format - date-time (as date-time in RFC3339). Limits results to those on or before the specified date</param>
        /// <param name="page">Format - int32. Zero-based page number of results to retrieve</param>
        /// <param name="pageSize">Format - int32. Count of results to retrieve in each page (max 100)</param>
        /// <param name="include">Limits results to the specified columns</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        internal async System.Threading.Tasks.Task<ForecastResults> DatasetsRetrieveForecastsAsync(string dataSetName, string startDate, string endDate, int? page, int? pageSize, string include, System.Threading.CancellationToken cancellationToken)
        {
            if (dataSetName == null)
                throw new System.ArgumentNullException("dataSetName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/data/{dataSetName}/forecast?");
            urlBuilder_.Replace("{dataSetName}", System.Uri.EscapeDataString(dataSetName.ToString()));
            if (startDate != null) urlBuilder_.Append("startDate=").Append(System.Uri.EscapeDataString(startDate.ToString())).Append("&");
            if (endDate != null) urlBuilder_.Append("endDate=").Append(System.Uri.EscapeDataString(endDate.ToString())).Append("&");
            if (page != null) urlBuilder_.Append("page=").Append(System.Uri.EscapeDataString(page.Value.ToString())).Append("&");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(pageSize.Value.ToString())).Append("&");
            if (include != null) urlBuilder_.Append("include=").Append(System.Uri.EscapeDataString(include.ToString())).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastResults); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastResults>(responseData_);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("One or more query parameters are invalid", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Specified dataset was not found", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ForecastResults);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
  [System.CodeDom.Compiler.GeneratedCode("NSwag", "10.6.6324.28497")]
    public class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "10.6.6324.28497")]
    public class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }
   

}

